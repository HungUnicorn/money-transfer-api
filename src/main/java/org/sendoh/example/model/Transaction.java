package org.sendoh.example.model;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.sendoh.example.dto.request.TransferRequest;
import org.sendoh.example.dto.response.TransactionAccountResponse;

import java.time.Instant;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Stream;

import static java.util.Collections.unmodifiableSet;
import static java.util.stream.Collectors.toSet;

/**
 * Transaction is generated by transfer or by the transaction response
 *
 */

@ToString
@Getter
@EqualsAndHashCode
public final class Transaction {
    private final UUID id;
    private final String requestId;
    private final TransactionState state;
    private final Instant createdAt;
    private final Instant updatedAt;
    private final Instant completedAt;
    private final String reasonCode;
    private final Set<AccountTransaction> accountTransactions;

    public static Transaction fromTransferRequest(final TransferRequest transferRequest) {
        final AccountTransaction from = new AccountTransaction(transferRequest.getSourceAccountId(),
                transferRequest.getAmount().negate());

        final AccountTransaction to = new AccountTransaction(transferRequest.getTargetAccountId(),
                transferRequest.getAmount());

        return new Transaction(transferRequest.getRequestId(),
                Stream.of(from, to)
                        .collect(toSet()));
    }

    public static Transaction fromTransactionResponse(final Transaction transaction,
                                                      final TransactionAccountResponse transactionAccountResponse) {
        return new Transaction(transaction, transactionAccountResponse);
    }

    private Transaction(final String requestId, final Set<AccountTransaction> accountTransactions) {
        Instant currentInstant = Instant.now();
        this.id = UUID.randomUUID();
        this.createdAt = currentInstant;
        this.updatedAt = currentInstant;
        this.completedAt = null;
        this.reasonCode = null;
        this.state = TransactionState.PENDING;
        this.requestId = requestId;
        this.accountTransactions = unmodifiableSet(accountTransactions);
    }

    private Transaction(final Transaction transaction, final TransactionAccountResponse transactionAccountResponse) {
        this.id = transaction.id;
        this.createdAt = transaction.createdAt;
        this.updatedAt = transactionAccountResponse.getCompletedAt();
        this.completedAt = transactionAccountResponse.getCompletedAt();
        this.state = transactionAccountResponse.getTransactionState();
        this.reasonCode = transactionAccountResponse.getReasonCode();
        this.requestId = transaction.requestId;
        this.accountTransactions = transaction.accountTransactions;
    }
}
